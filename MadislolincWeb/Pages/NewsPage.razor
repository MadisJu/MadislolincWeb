@page "/news"

@using MadislolincWeb.Data
@inject NewsDataFetcher NewsData

<PageTitle>Latest News!</PageTitle>

@if(news == null)
{
    <p>Loading latest news...</p>
}
else
{

    @if(!Showing)
    {
        <div class="newsthumbnail-grid">

        @foreach (var _news in DisplayableNews())
        {
            <div class="newsthumbnail-box" onclick="@(() => ToggleNews(_news))">
            <img src="@GetImageString(_news)" class ="newsthumbnail-image">
            <h1 class="newsthumbnail-title">@_news.Title</h1>
            
            </div>   
        }
        </div>
    }
    else
    {
        <h1 class="newstitle">@SelectedNews.Title</h1>
        <p class="newstext">@SelectedNews.Story</p>
        <button onclick="@(() => ToggleNews(null))"> Click here to go back</button>
    }

    @if(news.Length > 3 && !Showing)
    {
        <div>
            <button onclick="@(() =>NextNews())">Next Page</button>
        </div>
    }
}
@code
{

    private int MaxNewsOnPage = 3;
    private int NewsIndex = 0;

    private bool Showing = false;

    private News SelectedNews;

    private News[] news;

    private void ToggleNews(News _selected)
    {
        SelectedNews = _selected;
        Showing = !Showing;
        InvokeAsync(() => StateHasChanged());
    }
    private void NextNews()
    {
        int pages = (int) Math.Floor((float)(news.Length / MaxNewsOnPage));
        if(NewsIndex == pages)
        {
            NewsIndex = 0;
        }
        else
        {
            NewsIndex++;
        }

        InvokeAsync(() => StateHasChanged());
    }

    private News[] DisplayableNews()
    {
        int pages = (int) Math.Floor((float)(news.Length / MaxNewsOnPage));

        if(pages == NewsIndex )
        {
            return news[(MaxNewsOnPage * NewsIndex) ..(MaxNewsOnPage * NewsIndex + ((news.Length % MaxNewsOnPage == 0) ? MaxNewsOnPage : news.Length % MaxNewsOnPage))];
        }
        else
        {
            return news[(MaxNewsOnPage * NewsIndex) ..(MaxNewsOnPage * NewsIndex + MaxNewsOnPage)];
        }
    }

    protected override async Task OnInitializedAsync()
    {
        news = await NewsData.GetNewsAsync();
    }

    private string GetImageString(News news)
    {
        return $"data/newsimages/{news.ImageName}";
    }
}
@page "/news"

@using MadislolincWeb.Data
@inject NewsDataFetcher NewsData

@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedSessionStorage SessionStorage

<PageTitle>Latest News!</PageTitle>

@if(@news == null || !isConnected)
{
    <p>Loading</p>
}
else
{

    @if(!Showing)
    {
        <div class="newsthumbnail-grid">

        @foreach (var _news in DisplayableNews())
        {
            <div class="newsthumbnail-box" onclick="@(() => ToggleNews(_news))">
            <img src="@GetImageString(_news)" class ="newsthumbnail-image">
            <h1 class="newsthumbnail-title">@_news.Title</h1>
            
            </div>   
        }
        </div>
    }
    else
    {
        <h1 class="newstitle">@SelectedNews.Title</h1>
        <p class="newstext">@SelectedNews.Story</p>
        <button class="pages" onclick="@(() => ToggleNews(null))"> Click here to go back</button>
    }

    @if(news.Length > 3 && !Showing)
    {
        <div class="pageselect">
            @for(int x = 0; x < newspages; x++)
            {
                //Dumb workaround but hey it works=?! (problem was that the value set for the button changed as the loop went forward)
                int y = x;
                <button class="pages" onclick="@(() =>NextNews(y))">@(y + 1)</button>
            }
        </div>
    }
}
@code
{

    private int MaxNewsOnPage = 3;

    private int NewsIndex = 0;

    private bool Showing = false;

    private News SelectedNews;

    private News[] news;

    int newspages;

    private void ToggleNews(News _selected)
    {
        SelectedNews = _selected;
        Showing = !Showing;
        StateHasChanged();
    }

    private async void NextNews(int pageindex)
    {
        NewsIndex = pageindex;

        InvokeAsync(() => StateHasChanged());

        //Set the current news page into the local browser storage so next time the news page is visited, it will automatically throw them into the same page (during the same session)
        await SessionStorage.SetAsync("NewsIndex", NewsIndex);
    }

    private News[] DisplayableNews()
    {
        int pages = (int) Math.Floor((float)(news.Length / MaxNewsOnPage));

        if(pages == NewsIndex )
        {
            return news[(MaxNewsOnPage * NewsIndex) ..(MaxNewsOnPage * NewsIndex + ((news.Length % MaxNewsOnPage == 0) ? MaxNewsOnPage : news.Length % MaxNewsOnPage))];
        }
        else
        {
            //Faulty logic not all pages might have a full thing
            return news[(MaxNewsOnPage * NewsIndex) ..(MaxNewsOnPage * NewsIndex + MaxNewsOnPage)];
        }
    }

    protected override async Task OnInitializedAsync()
    {
        news = await NewsData.GetNewsAsync();
        newspages = (int) Math.Floor((float)(news.Length / MaxNewsOnPage)) + 1;
        await InvokeAsync(() => StateHasChanged());
    }

    private bool isConnected = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadSessionData();
            isConnected = true;
            StateHasChanged();
        }
    }

    private async Task LoadSessionData()
    {
        var result = await SessionStorage.GetAsync<int>("NewsIndex");
        NewsIndex = result.Success ? result.Value : 0;
    }

    private string GetImageString(News news)
    {
        return $"data/newsimages/{news.ImageName}";
    }
}